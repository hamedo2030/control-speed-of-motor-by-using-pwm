
sample _dc_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000814  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000814  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d2  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028f  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000546  00000000  00000000  00001b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000268  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006fe  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a9 03 	call	0x752	; 0x752 <main>
  8a:	0c 94 08 04 	jmp	0x810	; 0x810 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:

void ADC_init(void)
{
	//SET_BIT(ADMUX,ADLAR);
	
	SET_BIT(ADMUX,REFS0);// AVCC voltage( 5 volt) and connect 
  92:	3e 9a       	sbi	0x07, 6	; 7
							//capacitor (10micro f) at AREF pin 
	
	SET_BIT(ADCSRA,ADEN); // ADC ENABLE 
  94:	37 9a       	sbi	0x06, 7	; 6
	
	SET_BIT(ADCSRA,ADPS1); // prescaler select factor 128 
  96:	31 9a       	sbi	0x06, 1	; 6
 	SET_BIT(ADCSRA,ADPS2);
  98:	32 9a       	sbi	0x06, 2	; 6

}
  9a:	08 95       	ret

0000009c <ADC_u16read>:

unsigned short ADC_u16read(unsigned char channel)
{
	unsigned short read_value ;
	channel&=0x07;
	ADMUX=(ADMUX&0xf8)|channel;
  9c:	97 b1       	in	r25, 0x07	; 7
}

unsigned short ADC_u16read(unsigned char channel)
{
	unsigned short read_value ;
	channel&=0x07;
  9e:	87 70       	andi	r24, 0x07	; 7
	ADMUX=(ADMUX&0xf8)|channel;
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	98 2b       	or	r25, r24
  a4:	97 b9       	out	0x07, r25	; 7
	
	SET_BIT(ADCSRA,ADSC);				// enable ADC start conversion 
  a6:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADSC)==1);    // wait until finish conversion 
  a8:	36 99       	sbic	0x06, 6	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <ADC_u16read+0xc>
	read_value=ADCL;					// read adc low data register 
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	90 e0       	ldi	r25, 0x00	; 0
	read_value|=(ADCH<<8);				// then read adc high data register
  b0:	45 b1       	in	r20, 0x05	; 5
  b2:	34 2f       	mov	r19, r20
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	82 2b       	or	r24, r18
  b8:	93 2b       	or	r25, r19
	return read_value;

  ba:	08 95       	ret

000000bc <DIO_set_pin_direction>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_set_pin_direction(char portname ,char pinnumber,char direction)
{
	switch(portname)
  bc:	84 34       	cpi	r24, 0x44	; 68
  be:	09 f4       	brne	.+2      	; 0xc2 <DIO_set_pin_direction+0x6>
  c0:	71 c0       	rjmp	.+226    	; 0x1a4 <DIO_set_pin_direction+0xe8>
  c2:	85 34       	cpi	r24, 0x45	; 69
  c4:	48 f4       	brcc	.+18     	; 0xd8 <DIO_set_pin_direction+0x1c>
  c6:	82 34       	cpi	r24, 0x42	; 66
  c8:	99 f1       	breq	.+102    	; 0x130 <DIO_set_pin_direction+0x74>
  ca:	83 34       	cpi	r24, 0x43	; 67
  cc:	08 f0       	brcs	.+2      	; 0xd0 <DIO_set_pin_direction+0x14>
  ce:	4d c0       	rjmp	.+154    	; 0x16a <DIO_set_pin_direction+0xae>
  d0:	81 34       	cpi	r24, 0x41	; 65
  d2:	09 f0       	breq	.+2      	; 0xd6 <DIO_set_pin_direction+0x1a>
  d4:	83 c0       	rjmp	.+262    	; 0x1dc <DIO_set_pin_direction+0x120>
  d6:	0f c0       	rjmp	.+30     	; 0xf6 <DIO_set_pin_direction+0x3a>
  d8:	82 36       	cpi	r24, 0x62	; 98
  da:	51 f1       	breq	.+84     	; 0x130 <DIO_set_pin_direction+0x74>
  dc:	83 36       	cpi	r24, 0x63	; 99
  de:	20 f4       	brcc	.+8      	; 0xe8 <DIO_set_pin_direction+0x2c>
  e0:	81 36       	cpi	r24, 0x61	; 97
  e2:	09 f0       	breq	.+2      	; 0xe6 <DIO_set_pin_direction+0x2a>
  e4:	7b c0       	rjmp	.+246    	; 0x1dc <DIO_set_pin_direction+0x120>
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <DIO_set_pin_direction+0x3a>
  e8:	83 36       	cpi	r24, 0x63	; 99
  ea:	09 f4       	brne	.+2      	; 0xee <DIO_set_pin_direction+0x32>
  ec:	3e c0       	rjmp	.+124    	; 0x16a <DIO_set_pin_direction+0xae>
  ee:	84 36       	cpi	r24, 0x64	; 100
  f0:	09 f0       	breq	.+2      	; 0xf4 <DIO_set_pin_direction+0x38>
  f2:	74 c0       	rjmp	.+232    	; 0x1dc <DIO_set_pin_direction+0x120>
  f4:	57 c0       	rjmp	.+174    	; 0x1a4 <DIO_set_pin_direction+0xe8>
	{
		case 'A':
		case 'a':
			if(direction==1)
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	69 f4       	brne	.+26     	; 0x114 <DIO_set_pin_direction+0x58>
			{
				DDRA|=(1<<pinnumber);
  fa:	2a b3       	in	r18, 0x1a	; 26
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	ac 01       	movw	r20, r24
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_set_pin_direction+0x4c>
 104:	44 0f       	add	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_set_pin_direction+0x48>
 10c:	ba 01       	movw	r22, r20
 10e:	62 2b       	or	r22, r18
 110:	6a bb       	out	0x1a, r22	; 26
 112:	08 95       	ret
			}
			else
			{
				DDRA&=~(1<<pinnumber);
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	ac 01       	movw	r20, r24
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_set_pin_direction+0x66>
 11e:	44 0f       	add	r20, r20
 120:	55 1f       	adc	r21, r21
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_set_pin_direction+0x62>
 126:	ba 01       	movw	r22, r20
 128:	60 95       	com	r22
 12a:	62 23       	and	r22, r18
 12c:	6a bb       	out	0x1a, r22	; 26
 12e:	08 95       	ret
			}		
		break;
			case 'B':
			case 'b':
			if(direction==1)
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	69 f4       	brne	.+26     	; 0x14e <DIO_set_pin_direction+0x92>
			{
				DDRB|=(1<<pinnumber);
 134:	27 b3       	in	r18, 0x17	; 23
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	ac 01       	movw	r20, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_set_pin_direction+0x86>
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_set_pin_direction+0x82>
 146:	ba 01       	movw	r22, r20
 148:	62 2b       	or	r22, r18
 14a:	67 bb       	out	0x17, r22	; 23
 14c:	08 95       	ret
			}
			else
			{
				DDRB&=~(1<<pinnumber);
 14e:	27 b3       	in	r18, 0x17	; 23
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ac 01       	movw	r20, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_set_pin_direction+0xa0>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_set_pin_direction+0x9c>
 160:	ba 01       	movw	r22, r20
 162:	60 95       	com	r22
 164:	62 23       	and	r22, r18
 166:	67 bb       	out	0x17, r22	; 23
 168:	08 95       	ret
			}
		break;
			case 'C':
			case 'c':
			if(direction==1)
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	69 f4       	brne	.+26     	; 0x188 <DIO_set_pin_direction+0xcc>
			{
				DDRC|=(1<<pinnumber);
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	ac 01       	movw	r20, r24
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_set_pin_direction+0xc0>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_set_pin_direction+0xbc>
 180:	ba 01       	movw	r22, r20
 182:	62 2b       	or	r22, r18
 184:	64 bb       	out	0x14, r22	; 20
 186:	08 95       	ret
			}
			else
			{
				DDRC&=~(1<<pinnumber);
 188:	24 b3       	in	r18, 0x14	; 20
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	ac 01       	movw	r20, r24
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_set_pin_direction+0xda>
 192:	44 0f       	add	r20, r20
 194:	55 1f       	adc	r21, r21
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_set_pin_direction+0xd6>
 19a:	ba 01       	movw	r22, r20
 19c:	60 95       	com	r22
 19e:	62 23       	and	r22, r18
 1a0:	64 bb       	out	0x14, r22	; 20
 1a2:	08 95       	ret
			}
		
		break;
			case 'D':
			case 'd':
			if (direction==1)
 1a4:	41 30       	cpi	r20, 0x01	; 1
 1a6:	69 f4       	brne	.+26     	; 0x1c2 <DIO_set_pin_direction+0x106>
			{
				DDRD|=(1<<pinnumber);
 1a8:	21 b3       	in	r18, 0x11	; 17
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	ac 01       	movw	r20, r24
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_set_pin_direction+0xfa>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_set_pin_direction+0xf6>
 1ba:	ba 01       	movw	r22, r20
 1bc:	62 2b       	or	r22, r18
 1be:	61 bb       	out	0x11, r22	; 17
 1c0:	08 95       	ret
			}
			else
			{
				DDRD&=~(1<<pinnumber);
 1c2:	21 b3       	in	r18, 0x11	; 17
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	ac 01       	movw	r20, r24
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_set_pin_direction+0x114>
 1cc:	44 0f       	add	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_set_pin_direction+0x110>
 1d4:	ba 01       	movw	r22, r20
 1d6:	60 95       	com	r22
 1d8:	62 23       	and	r22, r18
 1da:	61 bb       	out	0x11, r22	; 17
 1dc:	08 95       	ret

000001de <DIO_write_pin>:
}	
// the write pin code

void DIO_write_pin(char portname, char pinnumber,char value)
{
	switch(portname)
 1de:	84 34       	cpi	r24, 0x44	; 68
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <DIO_write_pin+0x6>
 1e2:	71 c0       	rjmp	.+226    	; 0x2c6 <DIO_write_pin+0xe8>
 1e4:	85 34       	cpi	r24, 0x45	; 69
 1e6:	48 f4       	brcc	.+18     	; 0x1fa <DIO_write_pin+0x1c>
 1e8:	82 34       	cpi	r24, 0x42	; 66
 1ea:	99 f1       	breq	.+102    	; 0x252 <DIO_write_pin+0x74>
 1ec:	83 34       	cpi	r24, 0x43	; 67
 1ee:	08 f0       	brcs	.+2      	; 0x1f2 <DIO_write_pin+0x14>
 1f0:	4d c0       	rjmp	.+154    	; 0x28c <DIO_write_pin+0xae>
 1f2:	81 34       	cpi	r24, 0x41	; 65
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <DIO_write_pin+0x1a>
 1f6:	83 c0       	rjmp	.+262    	; 0x2fe <DIO_write_pin+0x120>
 1f8:	0f c0       	rjmp	.+30     	; 0x218 <DIO_write_pin+0x3a>
 1fa:	82 36       	cpi	r24, 0x62	; 98
 1fc:	51 f1       	breq	.+84     	; 0x252 <DIO_write_pin+0x74>
 1fe:	83 36       	cpi	r24, 0x63	; 99
 200:	20 f4       	brcc	.+8      	; 0x20a <DIO_write_pin+0x2c>
 202:	81 36       	cpi	r24, 0x61	; 97
 204:	09 f0       	breq	.+2      	; 0x208 <DIO_write_pin+0x2a>
 206:	7b c0       	rjmp	.+246    	; 0x2fe <DIO_write_pin+0x120>
 208:	07 c0       	rjmp	.+14     	; 0x218 <DIO_write_pin+0x3a>
 20a:	83 36       	cpi	r24, 0x63	; 99
 20c:	09 f4       	brne	.+2      	; 0x210 <DIO_write_pin+0x32>
 20e:	3e c0       	rjmp	.+124    	; 0x28c <DIO_write_pin+0xae>
 210:	84 36       	cpi	r24, 0x64	; 100
 212:	09 f0       	breq	.+2      	; 0x216 <DIO_write_pin+0x38>
 214:	74 c0       	rjmp	.+232    	; 0x2fe <DIO_write_pin+0x120>
 216:	57 c0       	rjmp	.+174    	; 0x2c6 <DIO_write_pin+0xe8>
	{
		case 'A':
		case 'a':
		if (value==1)
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	69 f4       	brne	.+26     	; 0x236 <DIO_write_pin+0x58>
		{
			SET_BIT(PORTA,pinnumber);
 21c:	2b b3       	in	r18, 0x1b	; 27
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ac 01       	movw	r20, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_write_pin+0x4c>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_write_pin+0x48>
 22e:	ba 01       	movw	r22, r20
 230:	62 2b       	or	r22, r18
 232:	6b bb       	out	0x1b, r22	; 27
 234:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 236:	2b b3       	in	r18, 0x1b	; 27
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_write_pin+0x66>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_write_pin+0x62>
 248:	ba 01       	movw	r22, r20
 24a:	60 95       	com	r22
 24c:	62 23       	and	r22, r18
 24e:	6b bb       	out	0x1b, r22	; 27
 250:	08 95       	ret
		}
	break;
		case 'B':
		case 'b':
		if (value==1)
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	69 f4       	brne	.+26     	; 0x270 <DIO_write_pin+0x92>
		{
			SET_BIT(PORTB,pinnumber);
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	ac 01       	movw	r20, r24
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_write_pin+0x86>
 260:	44 0f       	add	r20, r20
 262:	55 1f       	adc	r21, r21
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_write_pin+0x82>
 268:	ba 01       	movw	r22, r20
 26a:	62 2b       	or	r22, r18
 26c:	68 bb       	out	0x18, r22	; 24
 26e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);	
 270:	28 b3       	in	r18, 0x18	; 24
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_write_pin+0xa0>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_write_pin+0x9c>
 282:	ba 01       	movw	r22, r20
 284:	60 95       	com	r22
 286:	62 23       	and	r22, r18
 288:	68 bb       	out	0x18, r22	; 24
 28a:	08 95       	ret
		}
	break;
		case 'C':
		case 'c':
		if (value==1)
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	69 f4       	brne	.+26     	; 0x2aa <DIO_write_pin+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
 290:	25 b3       	in	r18, 0x15	; 21
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	ac 01       	movw	r20, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_write_pin+0xc0>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_write_pin+0xbc>
 2a2:	ba 01       	movw	r22, r20
 2a4:	62 2b       	or	r22, r18
 2a6:	65 bb       	out	0x15, r22	; 21
 2a8:	08 95       	ret
		}
		else 
		{
			CLR_BIT(PORTC,pinnumber);
 2aa:	25 b3       	in	r18, 0x15	; 21
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ac 01       	movw	r20, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_write_pin+0xda>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_write_pin+0xd6>
 2bc:	ba 01       	movw	r22, r20
 2be:	60 95       	com	r22
 2c0:	62 23       	and	r22, r18
 2c2:	65 bb       	out	0x15, r22	; 21
 2c4:	08 95       	ret
		}
	break;
		case 'D':
		case 'd':
		if (value==1)
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	69 f4       	brne	.+26     	; 0x2e4 <DIO_write_pin+0x106>
		{
			SET_BIT(PORTD,pinnumber);
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ac 01       	movw	r20, r24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_write_pin+0xfa>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_write_pin+0xf6>
 2dc:	ba 01       	movw	r22, r20
 2de:	62 2b       	or	r22, r18
 2e0:	62 bb       	out	0x12, r22	; 18
 2e2:	08 95       	ret
		}
		else 
		{
			CLR_BIT(PORTD,pinnumber);
 2e4:	22 b3       	in	r18, 0x12	; 18
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ac 01       	movw	r20, r24
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_write_pin+0x114>
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_write_pin+0x110>
 2f6:	ba 01       	movw	r22, r20
 2f8:	60 95       	com	r22
 2fa:	62 23       	and	r22, r18
 2fc:	62 bb       	out	0x12, r22	; 18
 2fe:	08 95       	ret

00000300 <DIO_toggle_pin>:
	
// the toggle pin code 

void DIO_toggle_pin(char portname,char pinnumber)
{
	switch (portname)
 300:	84 34       	cpi	r24, 0x44	; 68
 302:	09 f4       	brne	.+2      	; 0x306 <DIO_toggle_pin+0x6>
 304:	3d c0       	rjmp	.+122    	; 0x380 <DIO_toggle_pin+0x80>
 306:	85 34       	cpi	r24, 0x45	; 69
 308:	40 f4       	brcc	.+16     	; 0x31a <DIO_toggle_pin+0x1a>
 30a:	82 34       	cpi	r24, 0x42	; 66
 30c:	f9 f0       	breq	.+62     	; 0x34c <DIO_toggle_pin+0x4c>
 30e:	83 34       	cpi	r24, 0x43	; 67
 310:	50 f5       	brcc	.+84     	; 0x366 <DIO_toggle_pin+0x66>
 312:	81 34       	cpi	r24, 0x41	; 65
 314:	09 f0       	breq	.+2      	; 0x318 <DIO_toggle_pin+0x18>
 316:	40 c0       	rjmp	.+128    	; 0x398 <DIO_toggle_pin+0x98>
 318:	0c c0       	rjmp	.+24     	; 0x332 <DIO_toggle_pin+0x32>
 31a:	82 36       	cpi	r24, 0x62	; 98
 31c:	b9 f0       	breq	.+46     	; 0x34c <DIO_toggle_pin+0x4c>
 31e:	83 36       	cpi	r24, 0x63	; 99
 320:	18 f4       	brcc	.+6      	; 0x328 <DIO_toggle_pin+0x28>
 322:	81 36       	cpi	r24, 0x61	; 97
 324:	c9 f5       	brne	.+114    	; 0x398 <DIO_toggle_pin+0x98>
 326:	05 c0       	rjmp	.+10     	; 0x332 <DIO_toggle_pin+0x32>
 328:	83 36       	cpi	r24, 0x63	; 99
 32a:	e9 f0       	breq	.+58     	; 0x366 <DIO_toggle_pin+0x66>
 32c:	84 36       	cpi	r24, 0x64	; 100
 32e:	a1 f5       	brne	.+104    	; 0x398 <DIO_toggle_pin+0x98>
 330:	27 c0       	rjmp	.+78     	; 0x380 <DIO_toggle_pin+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
 332:	2b b3       	in	r18, 0x1b	; 27
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	ac 01       	movw	r20, r24
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_toggle_pin+0x40>
 33c:	44 0f       	add	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_toggle_pin+0x3c>
 344:	ba 01       	movw	r22, r20
 346:	62 27       	eor	r22, r18
 348:	6b bb       	out	0x1b, r22	; 27
	break;
 34a:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pinnumber);
 34c:	28 b3       	in	r18, 0x18	; 24
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	ac 01       	movw	r20, r24
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_toggle_pin+0x5a>
 356:	44 0f       	add	r20, r20
 358:	55 1f       	adc	r21, r21
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_toggle_pin+0x56>
 35e:	ba 01       	movw	r22, r20
 360:	62 27       	eor	r22, r18
 362:	68 bb       	out	0x18, r22	; 24
	break;
 364:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pinnumber);
 366:	25 b3       	in	r18, 0x15	; 21
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	ac 01       	movw	r20, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_toggle_pin+0x74>
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_toggle_pin+0x70>
 378:	ba 01       	movw	r22, r20
 37a:	62 27       	eor	r22, r18
 37c:	65 bb       	out	0x15, r22	; 21
	break;
 37e:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pinnumber);
 380:	22 b3       	in	r18, 0x12	; 18
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	ac 01       	movw	r20, r24
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_toggle_pin+0x8e>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_toggle_pin+0x8a>
 392:	ba 01       	movw	r22, r20
 394:	62 27       	eor	r22, r18
 396:	62 bb       	out	0x12, r22	; 18
 398:	08 95       	ret

0000039a <DIO_read_pin>:
// the read pin code 

unsigned char DIO_read_pin(char portname, char pinnumber)
{
	unsigned char value=0;
	switch(portname)
 39a:	84 34       	cpi	r24, 0x44	; 68
 39c:	09 f4       	brne	.+2      	; 0x3a0 <DIO_read_pin+0x6>
 39e:	4e c0       	rjmp	.+156    	; 0x43c <DIO_read_pin+0xa2>
 3a0:	85 34       	cpi	r24, 0x45	; 69
 3a2:	40 f4       	brcc	.+16     	; 0x3b4 <DIO_read_pin+0x1a>
 3a4:	82 34       	cpi	r24, 0x42	; 66
 3a6:	31 f1       	breq	.+76     	; 0x3f4 <DIO_read_pin+0x5a>
 3a8:	83 34       	cpi	r24, 0x43	; 67
 3aa:	b0 f5       	brcc	.+108    	; 0x418 <DIO_read_pin+0x7e>
 3ac:	81 34       	cpi	r24, 0x41	; 65
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <DIO_read_pin+0x18>
 3b0:	57 c0       	rjmp	.+174    	; 0x460 <DIO_read_pin+0xc6>
 3b2:	0e c0       	rjmp	.+28     	; 0x3d0 <DIO_read_pin+0x36>
 3b4:	82 36       	cpi	r24, 0x62	; 98
 3b6:	f1 f0       	breq	.+60     	; 0x3f4 <DIO_read_pin+0x5a>
 3b8:	83 36       	cpi	r24, 0x63	; 99
 3ba:	20 f4       	brcc	.+8      	; 0x3c4 <DIO_read_pin+0x2a>
 3bc:	81 36       	cpi	r24, 0x61	; 97
 3be:	09 f0       	breq	.+2      	; 0x3c2 <DIO_read_pin+0x28>
 3c0:	4f c0       	rjmp	.+158    	; 0x460 <DIO_read_pin+0xc6>
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <DIO_read_pin+0x36>
 3c4:	83 36       	cpi	r24, 0x63	; 99
 3c6:	41 f1       	breq	.+80     	; 0x418 <DIO_read_pin+0x7e>
 3c8:	84 36       	cpi	r24, 0x64	; 100
 3ca:	09 f0       	breq	.+2      	; 0x3ce <DIO_read_pin+0x34>
 3cc:	49 c0       	rjmp	.+146    	; 0x460 <DIO_read_pin+0xc6>
 3ce:	36 c0       	rjmp	.+108    	; 0x43c <DIO_read_pin+0xa2>
	{
		case 'A':
		case 'a':
		value=READ_BIT(PINA,pinnumber);
 3d0:	29 b3       	in	r18, 0x19	; 25
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	06 2e       	mov	r0, r22
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_read_pin+0x44>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_read_pin+0x40>
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	82 23       	and	r24, r18
 3e6:	93 23       	and	r25, r19
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_read_pin+0x54>
 3ea:	95 95       	asr	r25
 3ec:	87 95       	ror	r24
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_read_pin+0x50>
	break;
 3f2:	08 95       	ret
		case 'B':
		case 'b':
		value=READ_BIT(PINB,pinnumber);
 3f4:	26 b3       	in	r18, 0x16	; 22
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	06 2e       	mov	r0, r22
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_read_pin+0x68>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_read_pin+0x64>
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	82 23       	and	r24, r18
 40a:	93 23       	and	r25, r19
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_read_pin+0x78>
 40e:	95 95       	asr	r25
 410:	87 95       	ror	r24
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_read_pin+0x74>
	break;
 416:	08 95       	ret
		case 'C':
		case 'c':
		value=READ_BIT(PINC,pinnumber);
 418:	23 b3       	in	r18, 0x13	; 19
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	06 2e       	mov	r0, r22
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_read_pin+0x8c>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_read_pin+0x88>
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	82 23       	and	r24, r18
 42e:	93 23       	and	r25, r19
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_read_pin+0x9c>
 432:	95 95       	asr	r25
 434:	87 95       	ror	r24
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_read_pin+0x98>
	break;
 43a:	08 95       	ret
		case 'D':
		case 'd':
		value=READ_BIT(PIND,pinnumber);
 43c:	20 b3       	in	r18, 0x10	; 16
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	06 2e       	mov	r0, r22
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_read_pin+0xb0>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_read_pin+0xac>
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	82 23       	and	r24, r18
 452:	93 23       	and	r25, r19
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_read_pin+0xc0>
 456:	95 95       	asr	r25
 458:	87 95       	ror	r24
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_read_pin+0xbc>
	break;
 45e:	08 95       	ret

// the read pin code 

unsigned char DIO_read_pin(char portname, char pinnumber)
{
	unsigned char value=0;
 460:	80 e0       	ldi	r24, 0x00	; 0
		value=READ_BIT(PIND,pinnumber);
	break;
	
	}
	return value ;
}
 462:	08 95       	ret

00000464 <DIO_set_port_direction>:

// the set port direction 
void DIO_set_port_direction(char portname,char direction )
{
	switch(portname)
 464:	84 34       	cpi	r24, 0x44	; 68
 466:	d9 f0       	breq	.+54     	; 0x49e <DIO_set_port_direction+0x3a>
 468:	85 34       	cpi	r24, 0x45	; 69
 46a:	38 f4       	brcc	.+14     	; 0x47a <DIO_set_port_direction+0x16>
 46c:	82 34       	cpi	r24, 0x42	; 66
 46e:	99 f0       	breq	.+38     	; 0x496 <DIO_set_port_direction+0x32>
 470:	83 34       	cpi	r24, 0x43	; 67
 472:	98 f4       	brcc	.+38     	; 0x49a <DIO_set_port_direction+0x36>
 474:	81 34       	cpi	r24, 0x41	; 65
 476:	a1 f4       	brne	.+40     	; 0x4a0 <DIO_set_port_direction+0x3c>
 478:	0c c0       	rjmp	.+24     	; 0x492 <DIO_set_port_direction+0x2e>
 47a:	82 36       	cpi	r24, 0x62	; 98
 47c:	61 f0       	breq	.+24     	; 0x496 <DIO_set_port_direction+0x32>
 47e:	83 36       	cpi	r24, 0x63	; 99
 480:	18 f4       	brcc	.+6      	; 0x488 <DIO_set_port_direction+0x24>
 482:	81 36       	cpi	r24, 0x61	; 97
 484:	69 f4       	brne	.+26     	; 0x4a0 <DIO_set_port_direction+0x3c>
 486:	05 c0       	rjmp	.+10     	; 0x492 <DIO_set_port_direction+0x2e>
 488:	83 36       	cpi	r24, 0x63	; 99
 48a:	39 f0       	breq	.+14     	; 0x49a <DIO_set_port_direction+0x36>
 48c:	84 36       	cpi	r24, 0x64	; 100
 48e:	41 f4       	brne	.+16     	; 0x4a0 <DIO_set_port_direction+0x3c>
 490:	06 c0       	rjmp	.+12     	; 0x49e <DIO_set_port_direction+0x3a>
		{
			case 'A':
			case 'a':
			DDRA=direction;  
 492:	6a bb       	out	0x1a, r22	; 26
			break; 
 494:	08 95       	ret
			//.........................
			case 'B':
			case 'b': 
			DDRB=direction ;
 496:	67 bb       	out	0x17, r22	; 23
			break;
 498:	08 95       	ret
			//.........................
			case 'C':
			case 'c':
			DDRC=direction;
 49a:	64 bb       	out	0x14, r22	; 20
			break;
 49c:	08 95       	ret
			//..........................
			case 'D':
			case 'd':
			DDRD=direction;
 49e:	61 bb       	out	0x11, r22	; 17
 4a0:	08 95       	ret

000004a2 <DIO_write_port>:


// the write port code 
void DIO_write_port(char portname , char outputvalue)	
{
	switch(portname)
 4a2:	84 34       	cpi	r24, 0x44	; 68
 4a4:	d9 f0       	breq	.+54     	; 0x4dc <DIO_write_port+0x3a>
 4a6:	85 34       	cpi	r24, 0x45	; 69
 4a8:	38 f4       	brcc	.+14     	; 0x4b8 <DIO_write_port+0x16>
 4aa:	82 34       	cpi	r24, 0x42	; 66
 4ac:	99 f0       	breq	.+38     	; 0x4d4 <DIO_write_port+0x32>
 4ae:	83 34       	cpi	r24, 0x43	; 67
 4b0:	98 f4       	brcc	.+38     	; 0x4d8 <DIO_write_port+0x36>
 4b2:	81 34       	cpi	r24, 0x41	; 65
 4b4:	a1 f4       	brne	.+40     	; 0x4de <DIO_write_port+0x3c>
 4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <DIO_write_port+0x2e>
 4b8:	82 36       	cpi	r24, 0x62	; 98
 4ba:	61 f0       	breq	.+24     	; 0x4d4 <DIO_write_port+0x32>
 4bc:	83 36       	cpi	r24, 0x63	; 99
 4be:	18 f4       	brcc	.+6      	; 0x4c6 <DIO_write_port+0x24>
 4c0:	81 36       	cpi	r24, 0x61	; 97
 4c2:	69 f4       	brne	.+26     	; 0x4de <DIO_write_port+0x3c>
 4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <DIO_write_port+0x2e>
 4c6:	83 36       	cpi	r24, 0x63	; 99
 4c8:	39 f0       	breq	.+14     	; 0x4d8 <DIO_write_port+0x36>
 4ca:	84 36       	cpi	r24, 0x64	; 100
 4cc:	41 f4       	brne	.+16     	; 0x4de <DIO_write_port+0x3c>
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <DIO_write_port+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=outputvalue;
 4d0:	6b bb       	out	0x1b, r22	; 27
		break;
 4d2:	08 95       	ret
		//......................
		case 'B':
		case 'b':
		PORTB=outputvalue;
 4d4:	68 bb       	out	0x18, r22	; 24
		break;
 4d6:	08 95       	ret
		//......................
		case 'C':
		case 'c':
		PORTC=outputvalue;
 4d8:	65 bb       	out	0x15, r22	; 21
		break;
 4da:	08 95       	ret
		//......................
		case 'D':
		case 'd':
		PORTD=outputvalue;
 4dc:	62 bb       	out	0x12, r22	; 18
 4de:	08 95       	ret

000004e0 <DIO_toggle_port>:
	
// THE Toggle port code 

void DIO_toggle_port(char portname)	
{
	switch (portname)
 4e0:	84 34       	cpi	r24, 0x44	; 68
 4e2:	09 f1       	breq	.+66     	; 0x526 <DIO_toggle_port+0x46>
 4e4:	85 34       	cpi	r24, 0x45	; 69
 4e6:	38 f4       	brcc	.+14     	; 0x4f6 <DIO_toggle_port+0x16>
 4e8:	82 34       	cpi	r24, 0x42	; 66
 4ea:	a9 f0       	breq	.+42     	; 0x516 <DIO_toggle_port+0x36>
 4ec:	83 34       	cpi	r24, 0x43	; 67
 4ee:	b8 f4       	brcc	.+46     	; 0x51e <DIO_toggle_port+0x3e>
 4f0:	81 34       	cpi	r24, 0x41	; 65
 4f2:	e1 f4       	brne	.+56     	; 0x52c <DIO_toggle_port+0x4c>
 4f4:	0c c0       	rjmp	.+24     	; 0x50e <DIO_toggle_port+0x2e>
 4f6:	82 36       	cpi	r24, 0x62	; 98
 4f8:	71 f0       	breq	.+28     	; 0x516 <DIO_toggle_port+0x36>
 4fa:	83 36       	cpi	r24, 0x63	; 99
 4fc:	18 f4       	brcc	.+6      	; 0x504 <DIO_toggle_port+0x24>
 4fe:	81 36       	cpi	r24, 0x61	; 97
 500:	a9 f4       	brne	.+42     	; 0x52c <DIO_toggle_port+0x4c>
 502:	05 c0       	rjmp	.+10     	; 0x50e <DIO_toggle_port+0x2e>
 504:	83 36       	cpi	r24, 0x63	; 99
 506:	59 f0       	breq	.+22     	; 0x51e <DIO_toggle_port+0x3e>
 508:	84 36       	cpi	r24, 0x64	; 100
 50a:	81 f4       	brne	.+32     	; 0x52c <DIO_toggle_port+0x4c>
 50c:	0c c0       	rjmp	.+24     	; 0x526 <DIO_toggle_port+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
 50e:	8b b3       	in	r24, 0x1b	; 27
 510:	80 95       	com	r24
 512:	8b bb       	out	0x1b, r24	; 27
		break; 
 514:	08 95       	ret
		//....................
		case 'B':
		case 'b':
		PORTB=~PORTB;
 516:	88 b3       	in	r24, 0x18	; 24
 518:	80 95       	com	r24
 51a:	88 bb       	out	0x18, r24	; 24
		break;
 51c:	08 95       	ret
		//....................
		case 'C':
		case 'c':
		PORTC=~PORTC;
 51e:	85 b3       	in	r24, 0x15	; 21
 520:	80 95       	com	r24
 522:	85 bb       	out	0x15, r24	; 21
		break;
 524:	08 95       	ret
		//....................
		case 'D':
		case 'd':
		PORTD=~PORTD;
 526:	82 b3       	in	r24, 0x12	; 18
 528:	80 95       	com	r24
 52a:	82 bb       	out	0x12, r24	; 18
 52c:	08 95       	ret

0000052e <DIO_read_port>:
	
// THE READ PORT CODE 	
unsigned char DIO_read_port(char portname)
{
	unsigned char value=0 ; 
	switch (portname)
 52e:	84 34       	cpi	r24, 0x44	; 68
 530:	d9 f0       	breq	.+54     	; 0x568 <DIO_read_port+0x3a>
 532:	85 34       	cpi	r24, 0x45	; 69
 534:	38 f4       	brcc	.+14     	; 0x544 <DIO_read_port+0x16>
 536:	82 34       	cpi	r24, 0x42	; 66
 538:	99 f0       	breq	.+38     	; 0x560 <DIO_read_port+0x32>
 53a:	83 34       	cpi	r24, 0x43	; 67
 53c:	98 f4       	brcc	.+38     	; 0x564 <DIO_read_port+0x36>
 53e:	81 34       	cpi	r24, 0x41	; 65
 540:	a9 f4       	brne	.+42     	; 0x56c <DIO_read_port+0x3e>
 542:	0c c0       	rjmp	.+24     	; 0x55c <DIO_read_port+0x2e>
 544:	82 36       	cpi	r24, 0x62	; 98
 546:	61 f0       	breq	.+24     	; 0x560 <DIO_read_port+0x32>
 548:	83 36       	cpi	r24, 0x63	; 99
 54a:	18 f4       	brcc	.+6      	; 0x552 <DIO_read_port+0x24>
 54c:	81 36       	cpi	r24, 0x61	; 97
 54e:	71 f4       	brne	.+28     	; 0x56c <DIO_read_port+0x3e>
 550:	05 c0       	rjmp	.+10     	; 0x55c <DIO_read_port+0x2e>
 552:	83 36       	cpi	r24, 0x63	; 99
 554:	39 f0       	breq	.+14     	; 0x564 <DIO_read_port+0x36>
 556:	84 36       	cpi	r24, 0x64	; 100
 558:	49 f4       	brne	.+18     	; 0x56c <DIO_read_port+0x3e>
 55a:	06 c0       	rjmp	.+12     	; 0x568 <DIO_read_port+0x3a>
	{
		case 'A':
		case 'a':
		value=PIND ;
 55c:	80 b3       	in	r24, 0x10	; 16
		break;
 55e:	08 95       	ret
		//....................
		
		case 'B':
		case 'b':
		value=PINB ;
 560:	86 b3       	in	r24, 0x16	; 22
		break;
 562:	08 95       	ret
		//....................
		
		case 'C':
		case 'c':
		value=PINC ;
 564:	83 b3       	in	r24, 0x13	; 19
		break;
 566:	08 95       	ret
		//....................
		
		case 'D':
		case 'd':
		value=PIND ;
 568:	80 b3       	in	r24, 0x10	; 16
		break;
 56a:	08 95       	ret
}
	
// THE READ PORT CODE 	
unsigned char DIO_read_port(char portname)
{
	unsigned char value=0 ; 
 56c:	80 e0       	ldi	r24, 0x00	; 0
		value=PIND ;
		break;
	}
	
	return value ;
}
 56e:	08 95       	ret

00000570 <DIO_connect_pull_up>:
void DIO_connect_pull_up(char portname,char pinnumber,char enable)
{
	switch(portname)
 570:	84 34       	cpi	r24, 0x44	; 68
 572:	09 f4       	brne	.+2      	; 0x576 <DIO_connect_pull_up+0x6>
 574:	71 c0       	rjmp	.+226    	; 0x658 <DIO_connect_pull_up+0xe8>
 576:	85 34       	cpi	r24, 0x45	; 69
 578:	48 f4       	brcc	.+18     	; 0x58c <DIO_connect_pull_up+0x1c>
 57a:	82 34       	cpi	r24, 0x42	; 66
 57c:	99 f1       	breq	.+102    	; 0x5e4 <DIO_connect_pull_up+0x74>
 57e:	83 34       	cpi	r24, 0x43	; 67
 580:	08 f0       	brcs	.+2      	; 0x584 <DIO_connect_pull_up+0x14>
 582:	4d c0       	rjmp	.+154    	; 0x61e <DIO_connect_pull_up+0xae>
 584:	81 34       	cpi	r24, 0x41	; 65
 586:	09 f0       	breq	.+2      	; 0x58a <DIO_connect_pull_up+0x1a>
 588:	83 c0       	rjmp	.+262    	; 0x690 <DIO_connect_pull_up+0x120>
 58a:	0f c0       	rjmp	.+30     	; 0x5aa <DIO_connect_pull_up+0x3a>
 58c:	82 36       	cpi	r24, 0x62	; 98
 58e:	51 f1       	breq	.+84     	; 0x5e4 <DIO_connect_pull_up+0x74>
 590:	83 36       	cpi	r24, 0x63	; 99
 592:	20 f4       	brcc	.+8      	; 0x59c <DIO_connect_pull_up+0x2c>
 594:	81 36       	cpi	r24, 0x61	; 97
 596:	09 f0       	breq	.+2      	; 0x59a <DIO_connect_pull_up+0x2a>
 598:	7b c0       	rjmp	.+246    	; 0x690 <DIO_connect_pull_up+0x120>
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <DIO_connect_pull_up+0x3a>
 59c:	83 36       	cpi	r24, 0x63	; 99
 59e:	09 f4       	brne	.+2      	; 0x5a2 <DIO_connect_pull_up+0x32>
 5a0:	3e c0       	rjmp	.+124    	; 0x61e <DIO_connect_pull_up+0xae>
 5a2:	84 36       	cpi	r24, 0x64	; 100
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <DIO_connect_pull_up+0x38>
 5a6:	74 c0       	rjmp	.+232    	; 0x690 <DIO_connect_pull_up+0x120>
 5a8:	57 c0       	rjmp	.+174    	; 0x658 <DIO_connect_pull_up+0xe8>
	{
		case 'A':
		case 'a':
		if(enable==1)
 5aa:	41 30       	cpi	r20, 0x01	; 1
 5ac:	69 f4       	brne	.+26     	; 0x5c8 <DIO_connect_pull_up+0x58>
		{
			SET_BIT(PORTA,pinnumber);
 5ae:	2b b3       	in	r18, 0x1b	; 27
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	ac 01       	movw	r20, r24
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_connect_pull_up+0x4c>
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_connect_pull_up+0x48>
 5c0:	ba 01       	movw	r22, r20
 5c2:	62 2b       	or	r22, r18
 5c4:	6b bb       	out	0x1b, r22	; 27
 5c6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 5c8:	2b b3       	in	r18, 0x1b	; 27
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	ac 01       	movw	r20, r24
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_connect_pull_up+0x66>
 5d2:	44 0f       	add	r20, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_connect_pull_up+0x62>
 5da:	ba 01       	movw	r22, r20
 5dc:	60 95       	com	r22
 5de:	62 23       	and	r22, r18
 5e0:	6b bb       	out	0x1b, r22	; 27
 5e2:	08 95       	ret
		}
		break;
		//---------
		case 'B':
		case 'b':
		if(enable==1)
 5e4:	41 30       	cpi	r20, 0x01	; 1
 5e6:	69 f4       	brne	.+26     	; 0x602 <DIO_connect_pull_up+0x92>
		{
			SET_BIT(PORTB,pinnumber);
 5e8:	28 b3       	in	r18, 0x18	; 24
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	ac 01       	movw	r20, r24
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_connect_pull_up+0x86>
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_connect_pull_up+0x82>
 5fa:	ba 01       	movw	r22, r20
 5fc:	62 2b       	or	r22, r18
 5fe:	68 bb       	out	0x18, r22	; 24
 600:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 602:	28 b3       	in	r18, 0x18	; 24
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	ac 01       	movw	r20, r24
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_connect_pull_up+0xa0>
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_connect_pull_up+0x9c>
 614:	ba 01       	movw	r22, r20
 616:	60 95       	com	r22
 618:	62 23       	and	r22, r18
 61a:	68 bb       	out	0x18, r22	; 24
 61c:	08 95       	ret
		}
		break;
	//-------------------------
		case 'C':
		case 'c':
		if(enable==1)
 61e:	41 30       	cpi	r20, 0x01	; 1
 620:	69 f4       	brne	.+26     	; 0x63c <DIO_connect_pull_up+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
 622:	25 b3       	in	r18, 0x15	; 21
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	ac 01       	movw	r20, r24
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_connect_pull_up+0xc0>
 62c:	44 0f       	add	r20, r20
 62e:	55 1f       	adc	r21, r21
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_connect_pull_up+0xbc>
 634:	ba 01       	movw	r22, r20
 636:	62 2b       	or	r22, r18
 638:	65 bb       	out	0x15, r22	; 21
 63a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 63c:	25 b3       	in	r18, 0x15	; 21
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	ac 01       	movw	r20, r24
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_connect_pull_up+0xda>
 646:	44 0f       	add	r20, r20
 648:	55 1f       	adc	r21, r21
 64a:	6a 95       	dec	r22
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_connect_pull_up+0xd6>
 64e:	ba 01       	movw	r22, r20
 650:	60 95       	com	r22
 652:	62 23       	and	r22, r18
 654:	65 bb       	out	0x15, r22	; 21
 656:	08 95       	ret
		}	
		break;
		//---------------
		case 'D':
		case 'd':
		if(enable==1)
 658:	41 30       	cpi	r20, 0x01	; 1
 65a:	69 f4       	brne	.+26     	; 0x676 <DIO_connect_pull_up+0x106>
		{
			SET_BIT(PORTD,pinnumber);
 65c:	22 b3       	in	r18, 0x12	; 18
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	ac 01       	movw	r20, r24
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_connect_pull_up+0xfa>
 666:	44 0f       	add	r20, r20
 668:	55 1f       	adc	r21, r21
 66a:	6a 95       	dec	r22
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_connect_pull_up+0xf6>
 66e:	ba 01       	movw	r22, r20
 670:	62 2b       	or	r22, r18
 672:	62 bb       	out	0x12, r22	; 18
 674:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 676:	22 b3       	in	r18, 0x12	; 18
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	ac 01       	movw	r20, r24
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_connect_pull_up+0x114>
 680:	44 0f       	add	r20, r20
 682:	55 1f       	adc	r21, r21
 684:	6a 95       	dec	r22
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_connect_pull_up+0x110>
 688:	ba 01       	movw	r22, r20
 68a:	60 95       	com	r22
 68c:	62 23       	and	r22, r18
 68e:	62 bb       	out	0x12, r22	; 18
 690:	08 95       	ret

00000692 <write_low_nibble>:
	
	
}

void write_low_nibble(unsigned char portname ,unsigned char nibble_number)
{
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	c8 2f       	mov	r28, r24
 69a:	06 2f       	mov	r16, r22
	DIO_write_pin(portname,0,READ_BIT(nibble_number,0));
 69c:	46 2f       	mov	r20, r22
 69e:	41 70       	andi	r20, 0x01	; 1
 6a0:	60 e0       	ldi	r22, 0x00	; 0
 6a2:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_write_pin>
	DIO_write_pin(portname,1,READ_BIT(nibble_number,1));
 6a6:	10 e0       	ldi	r17, 0x00	; 0
 6a8:	a8 01       	movw	r20, r16
 6aa:	42 70       	andi	r20, 0x02	; 2
 6ac:	50 70       	andi	r21, 0x00	; 0
 6ae:	55 95       	asr	r21
 6b0:	47 95       	ror	r20
 6b2:	8c 2f       	mov	r24, r28
 6b4:	61 e0       	ldi	r22, 0x01	; 1
 6b6:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_write_pin>
	DIO_write_pin(portname,2,READ_BIT(nibble_number,2));
 6ba:	a8 01       	movw	r20, r16
 6bc:	44 70       	andi	r20, 0x04	; 4
 6be:	50 70       	andi	r21, 0x00	; 0
 6c0:	55 95       	asr	r21
 6c2:	47 95       	ror	r20
 6c4:	55 95       	asr	r21
 6c6:	47 95       	ror	r20
 6c8:	8c 2f       	mov	r24, r28
 6ca:	62 e0       	ldi	r22, 0x02	; 2
 6cc:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_write_pin>
	DIO_write_pin(portname,3,READ_BIT(nibble_number,3));
 6d0:	08 70       	andi	r16, 0x08	; 8
 6d2:	10 70       	andi	r17, 0x00	; 0
 6d4:	a8 01       	movw	r20, r16
 6d6:	55 95       	asr	r21
 6d8:	47 95       	ror	r20
 6da:	55 95       	asr	r21
 6dc:	47 95       	ror	r20
 6de:	55 95       	asr	r21
 6e0:	47 95       	ror	r20
 6e2:	8c 2f       	mov	r24, r28
 6e4:	63 e0       	ldi	r22, 0x03	; 3
 6e6:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_write_pin>
}
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	08 95       	ret

000006f2 <write_high_nibble>:
void write_high_nibble(unsigned char portname ,unsigned char nibble_number)
{
 6f2:	0f 93       	push	r16
 6f4:	1f 93       	push	r17
 6f6:	cf 93       	push	r28
 6f8:	c8 2f       	mov	r28, r24
 6fa:	06 2f       	mov	r16, r22
	DIO_write_pin(portname,3,READ_BIT(nibble_number,0));
 6fc:	46 2f       	mov	r20, r22
 6fe:	41 70       	andi	r20, 0x01	; 1
 700:	63 e0       	ldi	r22, 0x03	; 3
 702:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_write_pin>
	DIO_write_pin(portname,4,READ_BIT(nibble_number,1));
 706:	10 e0       	ldi	r17, 0x00	; 0
 708:	a8 01       	movw	r20, r16
 70a:	42 70       	andi	r20, 0x02	; 2
 70c:	50 70       	andi	r21, 0x00	; 0
 70e:	55 95       	asr	r21
 710:	47 95       	ror	r20
 712:	8c 2f       	mov	r24, r28
 714:	64 e0       	ldi	r22, 0x04	; 4
 716:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_write_pin>
	DIO_write_pin(portname,5,READ_BIT(nibble_number,2));
 71a:	a8 01       	movw	r20, r16
 71c:	44 70       	andi	r20, 0x04	; 4
 71e:	50 70       	andi	r21, 0x00	; 0
 720:	55 95       	asr	r21
 722:	47 95       	ror	r20
 724:	55 95       	asr	r21
 726:	47 95       	ror	r20
 728:	8c 2f       	mov	r24, r28
 72a:	65 e0       	ldi	r22, 0x05	; 5
 72c:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_write_pin>
	DIO_write_pin(portname,6,READ_BIT(nibble_number,3));
 730:	08 70       	andi	r16, 0x08	; 8
 732:	10 70       	andi	r17, 0x00	; 0
 734:	a8 01       	movw	r20, r16
 736:	55 95       	asr	r21
 738:	47 95       	ror	r20
 73a:	55 95       	asr	r21
 73c:	47 95       	ror	r20
 73e:	55 95       	asr	r21
 740:	47 95       	ror	r20
 742:	8c 2f       	mov	r24, r28
 744:	66 e0       	ldi	r22, 0x06	; 6
 746:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_write_pin>
		PORTC|=nibble_number;
		case 'D':
		PORTD&=0x0f;
		PORTD|=nibble_number;
	}*/
 74a:	cf 91       	pop	r28
 74c:	1f 91       	pop	r17
 74e:	0f 91       	pop	r16
 750:	08 95       	ret

00000752 <main>:
#include "timer.h"


int main(void)
{
	ADC_init() ;
 752:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	DIO_set_port_direction('d',0xff) ;
 756:	84 e6       	ldi	r24, 0x64	; 100
 758:	6f ef       	ldi	r22, 0xFF	; 255
 75a:	0e 94 32 02 	call	0x464	; 0x464 <DIO_set_port_direction>
	unsigned short data ;
	unsigned char pulse  ;
    while(1)
    {
		
	 data= ADC_u16read(0) ;
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_u16read>
		pulse=data/4;
 764:	96 95       	lsr	r25
 766:	87 95       	ror	r24
 768:	96 95       	lsr	r25
 76a:	87 95       	ror	r24
		
	   pwm_motor(pulse);            
 76c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <pwm_motor>
       DIO_write_pin('d',0,1);    
 770:	84 e6       	ldi	r24, 0x64	; 100
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	41 e0       	ldi	r20, 0x01	; 1
 776:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_write_pin>
	   DIO_write_pin('d',1,0);    
 77a:	84 e6       	ldi	r24, 0x64	; 100
 77c:	61 e0       	ldi	r22, 0x01	; 1
 77e:	40 e0       	ldi	r20, 0x00	; 0
 780:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_write_pin>
 784:	ec cf       	rjmp	.-40     	; 0x75e <main+0xc>

00000786 <timer_ctc_init>:



void timer_ctc_init(void)
{
	SET_BIT(TCCR0,CS00);
 786:	83 b7       	in	r24, 0x33	; 51
 788:	81 60       	ori	r24, 0x01	; 1
 78a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 78c:	83 b7       	in	r24, 0x33	; 51
 78e:	84 60       	ori	r24, 0x04	; 4
 790:	83 bf       	out	0x33, r24	; 51
	
	OCR0=78 ;
 792:	8e e4       	ldi	r24, 0x4E	; 78
 794:	8c bf       	out	0x3c, r24	; 60
	
	SET_BIT(TCCR0,WGM01) ;
 796:	83 b7       	in	r24, 0x33	; 51
 798:	88 60       	ori	r24, 0x08	; 8
 79a:	83 bf       	out	0x33, r24	; 51
	
	
	sei();
 79c:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 79e:	89 b7       	in	r24, 0x39	; 57
 7a0:	82 60       	ori	r24, 0x02	; 2
 7a2:	89 bf       	out	0x39, r24	; 57

}
 7a4:	08 95       	ret

000007a6 <pwm_timer0>:


void pwm_timer0(void)
{
	//set oc0 as output pin 
	SET_BIT(DDRB,3) ;
 7a6:	bb 9a       	sbi	0x17, 3	; 23
	
	//SET_OCR0 VALUE
	
	OCR0=64 ; 
 7a8:	80 e4       	ldi	r24, 0x40	; 64
 7aa:	8c bf       	out	0x3c, r24	; 60
	
	//select timer clock as 1024
	SET_BIT(TCCR0,CS00);
 7ac:	83 b7       	in	r24, 0x33	; 51
 7ae:	81 60       	ori	r24, 0x01	; 1
 7b0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 7b2:	83 b7       	in	r24, 0x33	; 51
 7b4:	84 60       	ori	r24, 0x04	; 4
 7b6:	83 bf       	out	0x33, r24	; 51
	
	// select fast pwm mode 
	SET_BIT(TCCR0,WGM00);
 7b8:	83 b7       	in	r24, 0x33	; 51
 7ba:	80 64       	ori	r24, 0x40	; 64
 7bc:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
 7be:	83 b7       	in	r24, 0x33	; 51
 7c0:	88 60       	ori	r24, 0x08	; 8
 7c2:	83 bf       	out	0x33, r24	; 51
	
	// select oc0 mode (compare output mode)
	// (non_inverting mode) 
	
	SET_BIT(TCCR0,COM01);
 7c4:	83 b7       	in	r24, 0x33	; 51
 7c6:	80 62       	ori	r24, 0x20	; 32
 7c8:	83 bf       	out	0x33, r24	; 51

}
 7ca:	08 95       	ret

000007cc <pwm_phase_correct_timer0>:


void pwm_phase_correct_timer0(void)
{
	//set oc0 as output pin
	SET_BIT(DDRB,3) ;
 7cc:	bb 9a       	sbi	0x17, 3	; 23
	
	//SET_OCR0 VALUE
	
	OCR0=128 ;
 7ce:	80 e8       	ldi	r24, 0x80	; 128
 7d0:	8c bf       	out	0x3c, r24	; 60
	
	//select timer clock as 1024
	//SET_BIT(TCCR0,CS00);
	SET_BIT(TCCR0,CS02);
 7d2:	83 b7       	in	r24, 0x33	; 51
 7d4:	84 60       	ori	r24, 0x04	; 4
 7d6:	83 bf       	out	0x33, r24	; 51
	
	// select pwm phase correct mode
	SET_BIT(TCCR0,WGM00);
 7d8:	83 b7       	in	r24, 0x33	; 51
 7da:	80 64       	ori	r24, 0x40	; 64
 7dc:	83 bf       	out	0x33, r24	; 51
	
	// select oc0 mode (compare output mode)
	// (non_inverting mode)
	
	
	SET_BIT(TCCR0,COM00);
 7de:	83 b7       	in	r24, 0x33	; 51
 7e0:	80 61       	ori	r24, 0x10	; 16
 7e2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
 7e4:	83 b7       	in	r24, 0x33	; 51
 7e6:	80 62       	ori	r24, 0x20	; 32
 7e8:	83 bf       	out	0x33, r24	; 51
	

}
 7ea:	08 95       	ret

000007ec <pwm_motor>:
void pwm_motor(unsigned char value )
{
	//set oc0 as output pin
	SET_BIT(DDRB,3) ;
 7ec:	bb 9a       	sbi	0x17, 3	; 23
	
	//SET_OCR0 VALUE
	
	OCR0=value  ;
 7ee:	8c bf       	out	0x3c, r24	; 60
	
	//select timer clock as 1024
	SET_BIT(TCCR0,CS00);
 7f0:	83 b7       	in	r24, 0x33	; 51
 7f2:	81 60       	ori	r24, 0x01	; 1
 7f4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 7f6:	83 b7       	in	r24, 0x33	; 51
 7f8:	84 60       	ori	r24, 0x04	; 4
 7fa:	83 bf       	out	0x33, r24	; 51
	
	// select fast pwm mode
	SET_BIT(TCCR0,WGM00);
 7fc:	83 b7       	in	r24, 0x33	; 51
 7fe:	80 64       	ori	r24, 0x40	; 64
 800:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
 802:	83 b7       	in	r24, 0x33	; 51
 804:	88 60       	ori	r24, 0x08	; 8
 806:	83 bf       	out	0x33, r24	; 51
	
	// select oc0 mode (compare output mode)
	// (non_inverting mode)
	
	SET_BIT(TCCR0,COM01);
 808:	83 b7       	in	r24, 0x33	; 51
 80a:	80 62       	ori	r24, 0x20	; 32
 80c:	83 bf       	out	0x33, r24	; 51

}
 80e:	08 95       	ret

00000810 <_exit>:
 810:	f8 94       	cli

00000812 <__stop_program>:
 812:	ff cf       	rjmp	.-2      	; 0x812 <__stop_program>
